//
// Created by 86130 on 2024/4/7.
//
//思路：每次都从队列里面找两个最小的元素，相加求和之后再放回到队列里面；
//直到队列中剩下最后一个元素时不用考虑；
//农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要 n 块木头，每块木头长度为整数 li
//个长度单位，于是他购买了一条很长的、能锯成 n 块的木头，即该木头的长度是 li的总和。
//但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如
// ，要将长度为 20 的木头锯成长度为 8、7 和 5 的三段，第一次锯木头花费 20，将木头锯成 12 和 8；第二次锯木头花费 12
// ，将长度为 12 的木头锯成 7 和 5，总花费为 32。如果第一次将木头锯成 15 和 5，则第二次锯木头花费 15，总花费为 35（大于 32）。
//请编写程序帮助农夫计算将木头锯成 n 块的最少花费
#include<bits/stdc++.h>
#include<vector>
#include<queue>
using namespace std;
int main()
{
    int n,i,sum=0,a,b,t;
    cin>>n;
    //优先队列：
    //第一个参数是数据的类型；
    //第二个参数是储存数据的容器；
    //第三个参数是优先队列的排序方式；
    //greater<int>之序列从小到大排列；
    //less<int>序列从大到小排列；
    priority_queue<int,vector<int>,greater<int> >h;//">一定要有空格>"；
    for(i=0;i<n;i++)
    {
        cin>>t;
        h.push(t);
    }
    //h.size()返回向量h中元素的个数；
    while(h.size()>1)
    {
        a=h.top();//返回栈顶元素；
        h.pop();//弹出栈顶元素；
        b=h.top();
        h.pop();
        sum=sum+a+b;
        h.push(a+b);
    }
    cout<<sum;
    return 0;
}
